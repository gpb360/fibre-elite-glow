#!/usr/bin/env node

/**
 * Simulate Stripe webhook for testing email functionality
 * This simulates the webhook that Stripe would send when a checkout session is completed
 */

// Node.js 18+ has built-in fetch

// Load environment variables from .env.local
import { loadEnv } from './load-env.js';
loadEnv();

const LOCAL_URL = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';

async function simulateStripeWebhook() {
  console.log('üîß Simulating Stripe webhook completion...');

  // Sample webhook payload that Stripe would send when a checkout session is completed
  const webhookPayload = {
    id: 'evt_test_webhook_' + Date.now(),
    object: 'event',
    api_version: '2023-10-16',
    created: Math.floor(Date.now() / 1000),
    livemode: false,
    pending_webhooks: 0,
    request: {
      id: 'req_test_' + Date.now(),
      idempotency_key: 'test_key_' + Date.now()
    },
    type: 'checkout.session.completed',
    data: {
      object: {
        id: 'cs_test_session_' + Date.now(),
        object: 'checkout.session',
        after_expiration: null,
        allow_promotion_codes: true,
        amount_subtotal: 7999,
        amount_total: 7999,
        automatic_tax: {
          enabled: false,
          liability: null,
          status: null
        },
        billing_address_collection: 'auto',
        cancel_url: `${LOCAL_URL}/cart?cancelled=true`,
        client_reference_id: null,
        collected_information: {
          billing_address: null,
          shipping_address: {
            city: 'Toronto',
            country: 'CA',
            line1: '123 Test Street',
            line2: '',
            postal_code: 'M5V 2N2',
            state: 'ON'
          }
        },
        created: 1700000000,
        currency: 'cad',
        customer: null,
        customer_creation: 'auto',
        customer_details: {
          address: {
            city: 'Toronto',
            country: 'CA',
            line1: '123 Test Street',
            line2: '',
            postal_code: 'M5V 2N2',
            state: 'ON'
          },
          email: 'garypboyd@gmail.com',
          name: 'Gary Boyd',
          phone: '+14164001207',
          tax_exempt: false,
          tax_ids: []
        },
        expires_at: 1700086400,
        livemode: false,
        locale: 'en',
        metadata: {
          customer_email: 'garypboyd@gmail.com',
          customer_name: 'Gary Boyd',
          order_number: 'FEG-' + Date.now() + '-TEST123',
          order_items: JSON.stringify([
            {
              id: 'prod_test_123',
              name: 'Total Essential',
              quantity: 1,
              price: 79.99,
              product_type: 'total_essential'
            }
          ]),
          shipping_address: JSON.stringify({
            line1: '123 Test Street',
            city: 'Toronto',
            state: 'ON',
            postal_code: 'M5V 2N2',
            country: 'CA'
          })
        },
        mode: 'payment',
        payment_intent: 'pi_test_payment_intent_' + Date.now(),
        payment_link: null,
        payment_method_collection: 'always',
        payment_status: 'paid',
        recovered_from: null,
        setup_intent: null,
        shipping_address_collection: 'auto',
        shipping_cost: {
          amount_shipping: 0,
          amount_tax: 0,
          discount: 0,
          shipping_rate: null,
          tax_behavior: 'exclusive'
        },
        shipping_details: {
          address: {
            city: 'Toronto',
            country: 'CA',
            line1: '123 Test Street',
            line2: '',
            postal_code: 'M5V 2N2',
            state: 'ON'
          },
          name: 'Gary Boyd',
          phone: '+14164001207'
        },
        shipping_options: [],
        status: 'complete',
        submit_type: 'auto',
        subscription: null,
        success_url: `${LOCAL_URL}/checkout/success?session_id={CHECKOUT_SESSION_ID}`,
        total_details: {
          amount_discount: 0,
          amount_shipping: 0,
          amount_subtotal: 7999,
          amount_tax: 0,
          amount_total: 7999
        },
        url: 'https://checkout.stripe.com/pay/cs_test_session_' + Date.now()
      }
    }
  };

  // Generate a test Stripe signature (in a real scenario, this would be generated by Stripe)
  const timestamp = Math.floor(Date.now() / 1000);
  const payloadString = JSON.stringify(webhookPayload, null, 2);
  const signature = `t=${timestamp},v1=mock_signature_for_testing`;

  console.log('üì§ Sending webhook to:', `${LOCAL_URL}/api/webhooks/stripe`);
  console.log('üìã Webhook type:', webhookPayload.type);
  console.log('üí∞ Payment amount:', webhookPayload.data.object.amount_total);
  console.log('üìß Customer email:', webhookPayload.data.object.customer_details.email);

  try {
    const response = await fetch(`${LOCAL_URL}/api/webhooks/stripe`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'stripe-signature': signature,
        'User-Agent': 'Stripe-Webhook-Simulator',
        'x-test-bypass': 'true'  // Development bypass header
      },
      body: JSON.stringify(webhookPayload),
    });

    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ Webhook processed successfully!');
      console.log('Response:', JSON.stringify(result, null, 2));

      if (result.received) {
        console.log('üéâ SUCCESS: The webhook was received and should have triggered emails!');
        console.log('üìß Check your inbox for:');
        console.log('   - Order confirmation email for Gary Boyd');
        console.log('   - Admin notification email');
      }
    } else {
      const errorText = await response.text();
      console.error('‚ùå Webhook failed with status:', response.status);
      console.error('Error:', errorText);
    }
  } catch (error) {
    console.error('‚ùå Error sending webhook:', error.message);
  }
}

// Check if server is running first
async function checkServer() {
  try {
    const response = await fetch(`${LOCAL_URL}/api/webhook-test`);
    return response.ok;
  } catch {
    return false;
  }
}

async function main() {
  console.log('üîç Checking if development server is running...');

  const serverRunning = await checkServer();

  if (!serverRunning) {
    console.error('‚ùå Development server is not running at', LOCAL_URL);
    console.log('\nüí° Please start your development server first:');
    console.log('   pnpm dev');
    console.log('\nThen run this script again.');
    process.exit(1);
  }

  console.log('‚úÖ Development server is running!\n');

  await simulateStripeWebhook();
}

main();